global
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon
    #stats socket /var/lib/haproxy/stats
    #stats socket ipv4@127.0.0.1:9999 level admin
    #stats socket /var/run/hapee-lb.sock mode 666 level admin
    stats socket :9000 mode 660 level admin
    stats timeout 2m

    tune.ssl.default-dh-param 2048

defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option                  http-server-close
    option                  redispatch
    retries                 7
    timeout http-request    300s
    timeout queue           300s
    timeout connect         300s
    timeout client          300s
    timeout server          300s
    timeout http-keep-alive 300s
    timeout check           300s
    maxconn                 3000
    http-errors myerrors
    errorfile 503 /etc/haproxy/errors/503.http


frontend mywebapp
  bind :80
  bind *:443 crt-ignore-err all ssl crt /etc/haproxy/certs/haproxy.pem
  mode http
  stats enable
  stats uri /stats
  stats refresh 10s
  errorfiles myerrors
  http-response return status 503 default-errorfiles if { status 503 }
  use_backend jira1 if { hdr(host) -m dom jira.internal } { url_param(node) jira-node1 }	|| { hdr(host) -m dom jira1.internal }
  use_backend jira2 if { hdr(host) -m dom jira.internal } { url_param(node) jira-node2 }	|| { hdr(host) -m dom jira2.internal }
  use_backend jira3 if { hdr(host) -m dom jira.internal } { url_param(node) jira-node3 }	|| { hdr(host) -m dom jira3.internal }
  use_backend jira if { hdr(host) -m dom jira.internal }
  use_backend grafana if { hdr(host) -m dom grafana.internal }
  use_backend prometheus if { hdr(host) -m dom prometheus.internal }
  use_backend pgadmin if { hdr(host) -m dom pgadmin.internal }
  use_backend nodered if { hdr(host) -m dom nodered.internal }

  default_backend default_web

cache jiracache
   total-max-size 4095
   max-object-size 1024
   max-age 300

peers sticktables
 bind :10000
 server loadbalancer1
 table sticky-sessions type ip size 1m

backend default_web
  mode http
  server def1 nodered:1880

backend jira
  mode http
  #balance roundrobin
  balance leastconn
  http-request cache-use jiracache
  http-response cache-store jiracache
  cookie SERVER insert indirect domain jira.internal
  cookie JSESSIONID prefix domain jira.internal
  stick match src table sticktables/sticky-sessions
  stick store-request src table sticktables/sticky-sessions
  option httpchk
  http-check send meth GET  uri /status
  http-check expect string RUNNING      
  server node1 jira-node1:8080 check inter 2s  fall 1  rise 10 cookie node1
  server node2 jira-node2:8080 check inter 2s  fall 1  rise 10 cookie node2
  server node3 jira-node3:8080 check inter 2s  fall 1  rise 10 cookie node3

backend jira1
  mode http
  http-request cache-use jiracache
  http-response cache-store jiracache
  cookie SERVER insert indirect domain jira.internal
  cookie JSESSIONID prefix domain jira.internal
  stick match src table sticktables/sticky-sessions
  stick store-request src table sticktables/sticky-sessions
  server web1 jira-node1:8080 cookie jira1

backend jira2
  mode http
  http-request cache-use jiracache
  http-response cache-store jiracache
  cookie SERVER insert indirect domain jira.internal
  cookie JSESSIONID prefix domain jira.internal
  stick match src table sticktables/sticky-sessions
  stick store-request src table sticktables/sticky-sessions
  server web1 jira-node2:8080 cookie jira2

backend jira3
  mode http
  http-request cache-use jiracache
  http-response cache-store jiracache
  cookie SERVER insert indirect domain jira.internal
  cookie JSESSIONID prefix domain jira.internal
  stick match src table sticktables/sticky-sessions
  stick store-request src table sticktables/sticky-sessions
  server web1 jira-node3:8080 cookie jira3

backend grafana
  mode http
  server grafana grafana:3000 check

backend prometheus
  mode http
  server prometheus prometheus:9090 check

backend pgadmin
  mode http
  server pgadmin pgadmin:5050 check

backend nodered
  mode http
  server nodered nodered:1880 check
